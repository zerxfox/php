<?php
declare(strict_types=1);

/*
 * ЗАДАНИЕ 1
 * - Создайте строковую переменную $login и присвойте ей значение ' User '
 * - Создайте строковую переменную $password и присвойте ей значение 'megaP@ssw0rd'
 * - Создайте строковую переменную $name и присвойте ей значение 'иван'
 * - Создайте строковую переменную $email и присвойте ей значение 'ivan@petrov.ru'
 * - Создайте строковую переменную $code и присвойте ей значение '<?=$login?>'
 */

/**
 * Логин пользователя с пробелами вокруг
 * 
 * @var string $login Имя пользователя с пробельными символами
 */
$login = ' User ';

/**
 * Пароль пользователя для проверки сложности
 * 
 * @var string $password Пароль для тестирования
 */
$password = 'megaP@ssw0rd';

/**
 * Имя пользователя в нижнем регистре
 * 
 * @var string $name Имя пользователя в нижнем регистре
 */
$name = 'иван';

/**
 * Email адрес пользователя для проверки валидности
 * 
 * @var string $email Email адрес для валидации
 */
$email = 'ivan@petrov.ru';

/**
 * Код с PHP тегами для демонстрации экранирования
 * 
 * @var string $code Строка с PHP тегами
 */
$code = '<?=$login?>';
?>
<!doctype html>
<html>
<head>
	<meta charset="utf-8">
	<title>Использование функций обработки строк</title>
</head>
<body>

<?php
	/*
	 * ЗАДАНИЕ 2
	 * - Используя строковые функции, удалите пробельные символы в начале и конце переменной $login, 
	 *   а также сделайте все символы строчными (малыми)
	 * - Проверьте значение переменной $password на сложность: пароль должен содержать минимум одну 
	 *   заглавную латинскую букву, одну строчную и одну цифру, а длина должна быть не меньше 8 символов. 
	 *   Оформите полученный код в виде пользовательской функции.
	 * - Используя строковые функции, сделайте первый символ значения переменной $name прописной (большой)
	 * - Используя функцию фильтрации переменных проверьте корректность значения $email
	 * - Используя строковые функции выведите значение переменной $code в браузер в том же виде 
	 *   как она задана в коде
	 */
	
	/**
	 * Обработка логина: удаление пробелов и приведение к нижнему регистру
	 */
	$login = trim($login);
	$login = strtolower($login);
	echo "Обработанный логин: '$login'<br>";
	
	/**
	 * Проверяет сложность пароля по заданным критериям
	 * 
	 * Пароль считается сложным, если:
	 * - Длина не менее 8 символов
	 * - Содержит хотя бы одну заглавную латинскую букву
	 * - Содержит хотя бы одну строчную латинскую букву  
	 * - Содержит хотя бы одну цифру
	 *
	 * @param string $password Пароль для проверки
	 * @return bool Возвращает true если пароль сложный, false если простой
	 */
	function checkPasswordStrength(string $password): bool {
		// Проверка минимальной длины пароля
		if (strlen($password) < 8) {
			return false;
		}
		
		// Проверка наличия заглавных латинских букв
		if (!preg_match('/[A-Z]/', $password)) {
			return false;
		}
		
		// Проверка наличия строчных латинских букв
		if (!preg_match('/[a-z]/', $password)) {
			return false;
		}
		
		// Проверка наличия цифр
		if (!preg_match('/[0-9]/', $password)) {
			return false;
		}
		
		return true;
	}
	
	/**
	 * Проверка сложности пароля и вывод результата
	 */
	$isPasswordStrong = checkPasswordStrength($password);
	echo "Пароль сложный: " . ($isPasswordStrong ? 'да' : 'нет') . "<br>";
	
	/**
	 * Преобразование имени: первый символ в верхний регистр
	 * Используется мультибайтовая функция для корректной работы с кириллицей
	 */
	$name = mb_convert_case($name, MB_CASE_TITLE, "UTF-8");
	echo "Обработанное имя: $name<br>";
	
	/**
	 * Валидация email адреса с помощью фильтра
	 */
	$isEmailValid = filter_var($email, FILTER_VALIDATE_EMAIL);
	echo "Email корректный: " . ($isEmailValid ? 'да' : 'нет') . "<br>";
	
	/**
	 * Вывод кода с экранированием специальных символов
	 * Функция htmlspecialchars предотвращает интерпретацию HTML и PHP тегов
	 */
	echo "Код: " . htmlspecialchars($code) . "<br>";
?>
</body>
</html>
